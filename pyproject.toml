[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "hbb"
authors = [
  { name = "Cristina MantillaSuarez", email = "criss.ms7@gmail.com" },
  { name = "Gabriela Hamilton", email = "gabihamilton@gmail.com" },

]
description = "hbb"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version", "dependencies"]

[tool.hatch]
version.path = "src/hbb/__init__.py"

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]

[project.urls]
Homepage = "https://github.com/DAZSLE/hbb-run3/"
"Bug Tracker" = "https://github.com/DAZSLE/hbb-run3/issues"
Discussions = "https://github.com/DAZSLE/hbb-run3/discussions"
Changelog = "https://github.com/DAZSLE/hbb-run3/releases"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.coverage]
run.source = ["hbb"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
strict = true

[tool.black]
line-length = 100

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR",    # Design related pylint codes
  "T201",   # print statements
  "EM101",  # Error message
  "EM102",
  "G001",   # Logging statement format
  "G002",   # Logging statement format
  "G004",
  "E722",   # bare except
  "RUF005", # iterable unpacking
  "RUF013", # implicit 'Optional' type
  "F811",   # redefinition of unused variable
  "PGH001", # eval
  "RET503",
  "RET504", # unnecessary assignment before return
  "RET505", # unnecessary else after return statement
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["hbb._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]